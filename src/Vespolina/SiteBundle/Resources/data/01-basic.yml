homepage:
    route:
        en: /
    title:
        en: Decoupled ecommerce framework business owners and developers will like!
    body:
        en: <p>The first opensource ecommerce project whith enterprise growth in mind!</p>
    template: VespolinaSiteBundle:Page:home.html.twig
    additionalInfoBlock:
        children:
            scalable:
                class: Symfony\Cmf\Bundle\BlockBundle\Document\MultilangSimpleBlock
                title:
                    en: Scalable Ecommerce
                content:
                    en: |
                     From starting your first new shop to an enterprise order processing system.  Yes, we has company growth in mind and got you covered both technical and operational aspects!
                     Read more about <a href="/en/features/from-shop-to-multinational">growing from a single to a multinational shop</a>
            business-process:
                class: Symfony\Cmf\Bundle\BlockBundle\Document\MultilangSimpleBlock
                title:
                    en: Business Process at it's core
                content:
                    en: |
                      Many opensource ecommerce systems do exist nowadays.  A topic which often is forgotton is the complexity of order processing.  Vespolina facilitates adjusting standard order to cash processes and let your developers easily create new processes tailored to your needs.
get-started:
    route: /get-started
    title: Getting started
    body: |
        <p>Check back later</p>
    template: VespolinaSiteBundle:Page:getting_started.html.twig
try:
    route: /try
    title:
        en: Available demo systems
    body: |
        <p>Below, you find a list of demo systems. This is still a work in progress, stuff might still break.</p>
        <p>All information you enter into the demo systems will not lead to any purchase as data is refreshed every day.</p>
    additionalInfoBlock:
        children:
            standard-us:
                class: Vespolina\SiteBundle\Document\TryBlock
                title:
                    en: Beverages, standard store, United States
                content:
                    en: <p>A typical store for beverages using the sandbox with taxation rules for US (state Oregon). Default product view is tiled. It's based on a normal checkout B2C process with physical fulfillment.</p>
                extra:
                    url:
                        en: http://try.vespolina.org/standard-beverages-store-us/web/app.php
            standard-be:
                class: Vespolina\SiteBundle\Document\TryBlock
                title:
                    en: Beverages, standard store, Belgium
                content:
                    en: <p>A typical store for beverages using the sandbox with taxation rules for Belgium (eg. VAT taxation). Default product view is a small list (optimized for small product lists). It's based on a normal B2C checkout process with physical fulfillment.</p>
                extra:
                    url:
                        en: http://try.vespolina.org/standard-beverages-store-be/web/app.php
            daily-france:
                class: Vespolina\SiteBundle\Document\TryBlock
                title:
                    en: Daily deal Beverages, France
                content:
                    en: <p>A daily deal store (one product a day) using the sandbox with taxation rules for France (eg. VAT taxation). It's based on a normal checkout B2C process with physical fulfillment.</p>
                extra:
                    url:
                        en: http://try.vespolina.org/daily-deal-beverages-store-fr/web/app.php
community:
    route: /community
    title:
        en: Community
    template: VespolinaSiteBundle:Page:community.html.twig
    body: |
        <p>We can't build Vespolina without a community. There are a few
        places where you can find us:</p>
        <ul>
            <li><a href="http://github.com/vespolina">Github</a></li>
            <li><a href="irc://chat.freenode.net#vespolina">IRC</a></li>
            <li><a href="https://groups.google.com/forum/#!forum/vespolina-dev">Google Groups</a></li>
features:
    route: /features/
    title: Vespolina features
    body: |
        <p>Check back later</p>

features-technical-architecture:
    parent: features
    route: /features/technical-architecture
    title: Technical architecture of Vespolina
    body: |
        <p>Check back later</p>

features-from-shop-to-multinational:
    parent: features
    route: /features/from-shop-to-multinational
    title: From shop to multionational
    body: |
        <p>Selecting an ecommerce system to be used for your business is often performed by comparing the looks of frontend
        user interfaces.  When it looks attractive and supports basic ecommerce operations such as cart to order processing,
        customer registration and some marketing features the choice is often easily made.</p>

        <p>When business grows and employees are hired many ecommerce systems do not fit the simple use case anymore.
        The software does not foresee additional complexities enterprise companies bring and developers are asked to add
        additional business requirements by hacking the existing system.  Over time the system becomes lesser maintainable.
        Adding new features becomes a tedious job resulting translating into an increased TOC (Total Cost Of Ownership).</p>


        <p>Vespolina is designed from the ground up to help business owners to move from a simple web shop to an enterprise
        company. Several enterprise functionalities are foreseen in the core of Vespolina while for others extension points
        have been foreseen. Being open source in nature extension points can be added by anybody.</p>


        <p>Ecommerce growth spans multiple dimensions, let us have a look at some:</p>

        <p><strong>Multi channel sales</strong></p>

        <p>Ecommerce usually starts with a web store selling a set of products. To increase revenue the business owner may
        decide to open additional web stores selling the same goods. Perhaps at different prices. Vespolina supports multi channel
        at it's core and keeps a reference to the sales channel for which the order was created.</p>


        <p>A sales channel can be anything. It can be a web store, a physical point of sales system or perhaps a merchant
        the business teams up with.</p>


        <p><strong>Integration</strong></p>

        <p>The Internet Cloud changed how merchants are doing sales. It is of the essence to be able to integrate easily
        with other parties. At it's core Vespolina makes no assumption where information is ought to persisted. For instance,
        one could decide to not store any products in the Vespolina core application but connect to an external product
        repository. Another example would be to store products, and carts local and use an external system such as SAP to
        store orders.</p>

features-why-using-vespolina:
    parent: features
    route: /features/why-using-vespolina
    title: Why using Vespolina
    body: |
        <p>Check back later</p>

features-why-developing-with-vespolina:
    parent: features
    route: /features/why-developing-with-vespolina
    title: Why developing with Vespolina
    body: |
        <p>Check back later</p>

features-choose-your-components:
    parent: features
    route: /features/choose-your-components
    title: Choose your components
    body: |
        <p>The Vespolina project is primarily an commerce framework.  What makes it assume is the fact that many components can be used outside of the traditional commerce context.  Even better various components can be used independently and are framework agnostic.   Others tie the Symfony2 framework to Vespolina making the framework even more awesome.  Let us start by looking at the Vespolina Sandbox from a bottom up perspective.</p>
    additionalInfoBlock:
        children:
            basic-libraries:
                class: Symfony\Cmf\Bundle\BlockBundle\Document\ContainerBlock
                children:
                    basic-libraries-title:
                        title: Basic libraries
                        extra: { settings: { template: VespolinaSiteBundle:Block:block_simple_h3.html.twig } }
                    basic-libraries-children:
                        class: Symfony\Cmf\Bundle\BlockBundle\Document\ContainerBlock
                        children:
                            core:
                                title: Core
                                content: The basis consists of the Core library containing core entities such as as product, order, customer and so on. The entities are persistence agnostic and allow anyone to jumpstart their project with easy to use entities.
                                extra: { settings: { template: VespolinaSiteBundle:Block:block_simple_h4.html.twig } }
                            taxonomy:
                                title: Taxonomy
                                content: Taxonomy is a library to manage taxonomies such as product categories, customer classifications and so on. It is a self standing library supporting persisting and retrieving taxonomies from Doctrine and PHPCR.
                                extra: { settings: { template: VespolinaSiteBundle:Block:block_simple_h4.html.twig } }
                            media:
                                title: Media
                                content: Media is a library to manage the abstract concept of media data, such as images, videos, documents and so on.
                                extra: { settings: { template: VespolinaSiteBundle:Block:block_simple_h4.html.twig } }
            adding-commerce:
                title: Adding the commerce flavour
                content: Commerce library is a collection of subcomponents to manage the foundations of commerce process. It allows you to create products, orders, customers, manage prices and so on. The library is ideal to kickstart your commerce, ERP or CRM project. Start with the comerce library and use the extension points to fast track your project.
                extra: { settings: { template: VespolinaSiteBundle:Block:block_simple_h3.html.twig } }
            adding-symfony2:
                title: Adding the Symfony2 framework flavour
                content: |
                    Symfony2 is an awesome framework. We provide the CommerceBundle to integrate the commerce library and provide various standard controllers and views to kickstart any commerce based on Symfony2. Building a CRM project is as easy as integrating this bundle and you already have Business Partners (customers, employees) and track products they have bought. It is an ideal base to create a backend ERP system.
                    One step further is to build an actual web store frontend using the StoreBundle. It provides controllers and views to create a store frontend to display products and various commerce processes such as checkout.
                extra: { settings: { template: VespolinaSiteBundle:Block:block_simple_h3.html.twig } }
            sandbox:
                title: Sandbox / standard edition
                content: The sandbox combines the CommerceBundle and StoreBundle and uses indirectly all libraries such as commerce, core, taxonomy and media to create a full web store experience. The choice is up to you!
                extra: { settings: { template: VespolinaSiteBundle:Block:block_simple_h3.html.twig } }
    template: VespolinaSiteBundle:Page:components.html.twig


features-configure-your-processes:
    parent: features
    route: /features/configure-your-processes
    title: Configure your processes
    body: |
        <p>Check back later</p>

features-integrate-with-your-business:
    parent: features
    route: /features/integrate-with-your-business
    title: Integrate with your business
    body: |
        <p>Check back later</p>