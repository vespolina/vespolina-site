{% extends 'knp_menu.html.twig' %}

{% macro attributes(attributes) %}
    {% for name, value in attributes %}
        {%- if value is not none and value is not sameas(false) -%}
            {{- ' %s="%s"'|format(name, value is sameas(true) ? name|e : value|e)|raw -}}
        {%- endif -%}
    {%- endfor -%}
{% endmacro %}

{% block root %}
    {% set listAttributes = { 'class' : 'main' } %}
    {% if item.hasChildren and options.depth is not sameas(0) and item.displayChildren %}
        {% set currentItem = item %}

        <ul{{ _self.attributes(listAttributes) }}>
            {% for item in currentItem.children %}
                {% set currentOptions = options %}
                {% set currentSubItem = item %}
                {# update the depth for children #}
                {% if options.depth is not none %}
                    {% set options = currentOptions|merge({'depth': currentOptions.depth - 1}) %}
                {% endif %}
                {% set attributes = {'class': 'test'} %}
                {% set _ = attribute(item, 'setAttributes', [{ 'data-name': item.name }]) %}{# This sucks, but can't get it work without overriding item otherwise #}
                {{ block('item') -}}
                {# restore current variables #}
                {% set item = currentSubItem %}
                {% set options = currentOptions %}
            {% endfor %}
        </ul>

        <div class="submenus">
            {% for item in currentItem.children %}
                <ul class="sub" id="submenu-{{ item.name }}">
                    {{ block('children') -}}
                </ul>
            {% endfor %}
        </div>
    {% endif %}
{% endblock %}

{% block list %}
    {% if item.hasChildren and options.depth is not sameas(0) and item.displayChildren %}
        <ul{{ _self.attributes(listAttributes) }}>
            {{ block('children') }}
        </ul>
    {% endif %}
{% endblock %}

{% block item %}
    {% if item.displayed %}
        {# building the class of the item #}
        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
        {%- if item.current %}
            {%- set classes = classes|merge([options.currentClass]) %}
        {%- elseif item.currentAncestor %}
            {%- set classes = classes|merge([options.ancestorClass]) %}
        {%- endif %}
        {%- if item.actsLikeFirst %}
            {%- set classes = classes|merge([options.firstClass]) %}
        {%- endif %}
        {%- if item.actsLikeLast %}
            {%- set classes = classes|merge([options.lastClass]) %}
        {%- endif %}
        {%- if item.hasChildren() %}
            {%- set classes = classes|merge(['has-dropdown']) %}
        {% endif %}
        {%- set attributes = item.attributes %}
        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- endif %}
        {# displaying the item #}

        <li{{ _self.attributes(attributes) }}>
            {%- if item.uri is not empty and (not item.current or options.currentAsLink) %}
                {{ block('linkElement') }}
            {%- else %}
                {{ block('spanElement') }}
            {%- endif %}
            {# render the list of children#}
            {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
            {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level, 'dropdown']) %}
            {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
            {{ block('list') }}
        </li>
    {% endif %}
{% endblock %}